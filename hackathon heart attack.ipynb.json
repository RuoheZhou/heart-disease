{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>140</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>172</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49</td>\n",
       "      <td>F</td>\n",
       "      <td>NAP</td>\n",
       "      <td>160</td>\n",
       "      <td>180</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>156</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37</td>\n",
       "      <td>M</td>\n",
       "      <td>ATA</td>\n",
       "      <td>130</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>ST</td>\n",
       "      <td>98</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48</td>\n",
       "      <td>F</td>\n",
       "      <td>ASY</td>\n",
       "      <td>138</td>\n",
       "      <td>214</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>108</td>\n",
       "      <td>Y</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Flat</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>54</td>\n",
       "      <td>M</td>\n",
       "      <td>NAP</td>\n",
       "      <td>150</td>\n",
       "      <td>195</td>\n",
       "      <td>0</td>\n",
       "      <td>Normal</td>\n",
       "      <td>122</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Up</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
       "0   40   M           ATA        140          289          0     Normal    172   \n",
       "1   49   F           NAP        160          180          0     Normal    156   \n",
       "2   37   M           ATA        130          283          0         ST     98   \n",
       "3   48   F           ASY        138          214          0     Normal    108   \n",
       "4   54   M           NAP        150          195          0     Normal    122   \n",
       "\n",
       "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
       "0              N      0.0       Up             0  \n",
       "1              N      1.0     Flat             1  \n",
       "2              N      0.0       Up             0  \n",
       "3              Y      1.5     Flat             1  \n",
       "4              N      0.0       Up             0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart = pd.read_csv(\"/Users/ruohezhou/Documents/hackathon/heart.csv\")\n",
    "heart.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
       "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope',\n",
       "       'HeartDisease'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>ChestPainType</th>\n",
       "      <th>RestingBP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>FastingBS</th>\n",
       "      <th>RestingECG</th>\n",
       "      <th>MaxHR</th>\n",
       "      <th>ExerciseAngina</th>\n",
       "      <th>Oldpeak</th>\n",
       "      <th>ST_Slope</th>\n",
       "      <th>HeartDisease</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>147</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>55</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>141</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>49</td>\n",
       "      <td>53</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Sex  ChestPainType  RestingBP  Cholesterol  FastingBS  RestingECG  \\\n",
       "0   12    1              1         41          147          0           1   \n",
       "1   21    0              2         55           40          0           1   \n",
       "2    9    1              1         31          141          0           2   \n",
       "3   20    0              0         39           72          0           1   \n",
       "4   26    1              2         49           53          0           1   \n",
       "\n",
       "   MaxHR  ExerciseAngina  Oldpeak  ST_Slope  HeartDisease  \n",
       "0     98               0       10         2             0  \n",
       "1     82               0       20         1             1  \n",
       "2     25               0       10         2             0  \n",
       "3     34               1       25         1             1  \n",
       "4     48               0       10         2             0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "le = preprocessing.LabelEncoder()\n",
    "for i in heart.columns:\n",
    "    encode = le.fit_transform(heart[i])\n",
    "    heart[i] = encode\n",
    "heart.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(918, 12)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      12\n",
       "1      21\n",
       "2       9\n",
       "3      20\n",
       "4      26\n",
       "       ..\n",
       "913    17\n",
       "914    40\n",
       "915    29\n",
       "916    29\n",
       "917    10\n",
       "Name: Age, Length: 918, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart['Age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array(heart[heart.columns[:11]])\n",
    "y = np.array(heart.loc[:, 'HeartDisease'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_temp, X_test, y_temp, y_test = \\\n",
    "        train_test_split(x, y, test_size=0.3, \n",
    "                         shuffle=True, random_state=1, stratify=y)\n",
    "\n",
    "X_train, X_valid, y_train, y_valid = \\\n",
    "        train_test_split(X_temp, y_temp, test_size=0.3,\n",
    "                         shuffle=True, random_state=1, stratify=y_temp)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train size (449, 11) class proportions [201 248]\n",
      "Valid size (193, 11) class proportions [ 86 107]\n",
      "Test size (276, 11) class proportions [123 153]\n"
     ]
    }
   ],
   "source": [
    "#standardization\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler().fit(X_train)\n",
    "\n",
    "X_train = scaler.transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "print('Train size', X_train.shape, 'class proportions', np.bincount(y_train))\n",
    "print('Valid size', X_valid.shape, 'class proportions', np.bincount(y_valid))\n",
    "print('Test size', X_test.shape, 'class proportions', np.bincount(y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy: 86.19%\n",
      "Validation accuracy: 49.74%\n",
      "Depth: 7\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "\n",
    "tree = DecisionTreeClassifier(random_state=1, min_samples_leaf=15)\n",
    "tree.fit(X_train, y_train)\n",
    "\n",
    "train_acc = tree.score(X_train, y_train)\n",
    "valid_acc = tree.score(X_valid, y_valid)\n",
    "test_acc = tree.score(X_test, y_test)\n",
    "\n",
    "print(f'Training accuracy: {train_acc*100:.2f}%')\n",
    "print(f'Validation accuracy: {valid_acc*100:.2f}%')\n",
    "print(f'Depth: {tree.get_depth()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
       "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope',\n",
       "       'HeartDisease'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "heart.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.tree import plot_tree\n",
    "\n",
    "\n",
    "plt.figure(figsize=(5, 7))\n",
    "\n",
    "plot_tree(tree, \n",
    "          filled=True, \n",
    "          rounded=True,\n",
    "          feature_names=['Age', 'Sex', 'ChestPainType', 'RestingBP', 'Cholesterol', 'FastingBS',\n",
    "       'RestingECG', 'MaxHR', 'ExerciseAngina', 'Oldpeak', 'ST_Slope'],\n",
    "          class_names=['no heart disease', \n",
    "                       'heart disease']\n",
    "         )\n",
    "\n",
    "#plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrMatrix = heart.corr()\n",
    "import seaborn as sn\n",
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(16,5))\n",
    "sn.heatmap(corrMatrix, annot=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_train_acc = []\n",
    "all_valid_acc = []\n",
    "all_hyperparam = []\n",
    "\n",
    "\n",
    "for i in range(1, 40):\n",
    "    tree = DecisionTreeClassifier(min_samples_leaf=i, random_state=1)\n",
    "    tree.fit(X_train, y_train)\n",
    "    train_acc = tree.score(X_train, y_train)\n",
    "    valid_acc = tree.score(X_valid, y_valid)\n",
    "    \n",
    "    all_train_acc.append(train_acc*100)\n",
    "    all_valid_acc.append(valid_acc*100)\n",
    "    all_hyperparam.append(i)\n",
    "    \n",
    "plt.plot(all_hyperparam, all_train_acc, label='Training accuracy')\n",
    "plt.plot(all_hyperparam, all_valid_acc, ls='--', label='Validation accuracy')\n",
    "plt.xlabel('min_samples_leaf')\n",
    "plt.ylabel('Accuracy in %')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n",
       "       0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0,\n",
       "       1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,\n",
       "       1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,\n",
       "       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
       "       1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n",
       "       0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n",
       "       1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,\n",
       "       0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "KNN classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8708240534521158"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "clf = KNeighborsClassifier().fit(X_train, y_train)\n",
    "clf.score(X_valid, y_valid)\n",
    "\n",
    "clf.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8297101449275363"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1,\n",
       "       0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0,\n",
       "       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,\n",
       "       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n",
       "       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "       0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,\n",
       "       1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0,\n",
       "       1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,\n",
       "       1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n",
       "       0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,\n",
       "       1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0,\n",
       "       0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/utils/validation.py:67: FutureWarning: Pass n_features_to_select=12 as keyword args. From version 0.25 passing these as positional arguments will result in an error\n",
      "  warnings.warn(\"Pass {} as keyword args. From version 0.25 \"\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "\n",
    "rfe = RFE(logreg, 12)\n",
    "\n",
    "rfe = rfe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.822463768115942"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfe.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5544041450777202"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfe.score(X_valid, y_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=<mlxtend.evaluate.holdout.PredefinedHoldoutSplit object at 0x12ab60be0>,\n",
       "             estimator=Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                                       ('kneighborsclassifier',\n",
       "                                        KNeighborsClassifier())]),\n",
       "             param_grid={'kneighborsclassifier__n_neighbors': [1, 3, 5, 7],\n",
       "                         'kneighborsclassifier__p': [1, 2]})"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from mlxtend.evaluate import PredefinedHoldoutSplit\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "\n",
    "train_ind, valid_ind = train_test_split(np.arange(X_train.shape[0]),\n",
    "                                        test_size=0.2, shuffle=True,\n",
    "                                        random_state=0, stratify=y_train)\n",
    "\n",
    "pipe = make_pipeline(StandardScaler(),\n",
    "                     KNeighborsClassifier())\n",
    "\n",
    "params = {'kneighborsclassifier__n_neighbors': [1, 3, 5, 7],\n",
    "          'kneighborsclassifier__p': [1, 2]}\n",
    "\n",
    "split = PredefinedHoldoutSplit(valid_indices=valid_ind)\n",
    "\n",
    "grid = GridSearchCV(pipe,\n",
    "                    param_grid=params,\n",
    "                    cv=split)\n",
    "\n",
    "grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'mean_fit_time': array([0.00373483, 0.00354791, 0.00183702, 0.00163674, 0.00157213,\n",
       "        0.00165486, 0.00134993, 0.001297  ]),\n",
       " 'std_fit_time': array([0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'mean_score_time': array([0.00918603, 0.00676489, 0.00626993, 0.00578523, 0.00534391,\n",
       "        0.00496531, 0.00502086, 0.00470686]),\n",
       " 'std_score_time': array([0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'param_kneighborsclassifier__n_neighbors': masked_array(data=[1, 1, 3, 3, 5, 5, 7, 7],\n",
       "              mask=[False, False, False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'param_kneighborsclassifier__p': masked_array(data=[1, 2, 1, 2, 1, 2, 1, 2],\n",
       "              mask=[False, False, False, False, False, False, False, False],\n",
       "        fill_value='?',\n",
       "             dtype=object),\n",
       " 'params': [{'kneighborsclassifier__n_neighbors': 1,\n",
       "   'kneighborsclassifier__p': 1},\n",
       "  {'kneighborsclassifier__n_neighbors': 1, 'kneighborsclassifier__p': 2},\n",
       "  {'kneighborsclassifier__n_neighbors': 3, 'kneighborsclassifier__p': 1},\n",
       "  {'kneighborsclassifier__n_neighbors': 3, 'kneighborsclassifier__p': 2},\n",
       "  {'kneighborsclassifier__n_neighbors': 5, 'kneighborsclassifier__p': 1},\n",
       "  {'kneighborsclassifier__n_neighbors': 5, 'kneighborsclassifier__p': 2},\n",
       "  {'kneighborsclassifier__n_neighbors': 7, 'kneighborsclassifier__p': 1},\n",
       "  {'kneighborsclassifier__n_neighbors': 7, 'kneighborsclassifier__p': 2}],\n",
       " 'split0_test_score': array([0.8       , 0.81111111, 0.83333333, 0.84444444, 0.87777778,\n",
       "        0.85555556, 0.9       , 0.83333333]),\n",
       " 'mean_test_score': array([0.8       , 0.81111111, 0.83333333, 0.84444444, 0.87777778,\n",
       "        0.85555556, 0.9       , 0.83333333]),\n",
       " 'std_test_score': array([0., 0., 0., 0., 0., 0., 0., 0.]),\n",
       " 'rank_test_score': array([8, 7, 5, 4, 2, 3, 1, 5], dtype=int32)}"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.cv_results_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'kneighborsclassifier__n_neighbors': 1, 'kneighborsclassifier__p': 1} 0.8\n",
      "{'kneighborsclassifier__n_neighbors': 1, 'kneighborsclassifier__p': 2} 0.8111111111111111\n",
      "{'kneighborsclassifier__n_neighbors': 3, 'kneighborsclassifier__p': 1} 0.8333333333333334\n",
      "{'kneighborsclassifier__n_neighbors': 3, 'kneighborsclassifier__p': 2} 0.8444444444444444\n",
      "{'kneighborsclassifier__n_neighbors': 5, 'kneighborsclassifier__p': 1} 0.8777777777777778\n",
      "{'kneighborsclassifier__n_neighbors': 5, 'kneighborsclassifier__p': 2} 0.8555555555555555\n",
      "{'kneighborsclassifier__n_neighbors': 7, 'kneighborsclassifier__p': 1} 0.9\n",
      "{'kneighborsclassifier__n_neighbors': 7, 'kneighborsclassifier__p': 2} 0.8333333333333334\n"
     ]
    }
   ],
   "source": [
    "for i,j in zip(grid.cv_results_['params'], grid.cv_results_['mean_test_score']):\n",
    "    print(i, j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9\n",
      "{'kneighborsclassifier__n_neighbors': 7, 'kneighborsclassifier__p': 1}\n"
     ]
    }
   ],
   "source": [
    "print(grid.best_score_)\n",
    "print(grid.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test accuracy: 84.78%\n"
     ]
    }
   ],
   "source": [
    "clf = grid.best_estimator_\n",
    "\n",
    "print('Test accuracy: %.2f%%' % (clf.score(X_test, y_test)*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.callbacks import EarlyStopping\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_21\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_58 (Dense)             (None, 16)                192       \n",
      "_________________________________________________________________\n",
      "dense_59 (Dense)             (None, 16)                272       \n",
      "_________________________________________________________________\n",
      "dense_60 (Dense)             (None, 1)                 17        \n",
      "_________________________________________________________________\n",
      "dense_61 (Dense)             (None, 1)                 2         \n",
      "=================================================================\n",
      "Total params: 483\n",
      "Trainable params: 483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/80\n",
      "36/36 [==============================] - 1s 7ms/step - loss: 0.6901 - accuracy: 0.5454 - val_loss: 0.6489 - val_accuracy: 0.6778\n",
      "Epoch 2/80\n",
      "36/36 [==============================] - 0s 2ms/step - loss: 0.6231 - accuracy: 0.7416 - val_loss: 0.5846 - val_accuracy: 0.7667\n",
      "Epoch 3/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.5536 - accuracy: 0.8136 - val_loss: 0.5243 - val_accuracy: 0.7778\n",
      "Epoch 4/80\n",
      "36/36 [==============================] - 0s 2ms/step - loss: 0.5372 - accuracy: 0.7595 - val_loss: 0.4851 - val_accuracy: 0.8111\n",
      "Epoch 5/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.4422 - accuracy: 0.8407 - val_loss: 0.4551 - val_accuracy: 0.8222\n",
      "Epoch 6/80\n",
      "36/36 [==============================] - 0s 2ms/step - loss: 0.3919 - accuracy: 0.8877 - val_loss: 0.4375 - val_accuracy: 0.8333\n",
      "Epoch 7/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.4025 - accuracy: 0.8592 - val_loss: 0.4236 - val_accuracy: 0.8333\n",
      "Epoch 8/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3833 - accuracy: 0.8610 - val_loss: 0.4170 - val_accuracy: 0.8333\n",
      "Epoch 9/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3834 - accuracy: 0.8639 - val_loss: 0.4065 - val_accuracy: 0.8333\n",
      "Epoch 10/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3502 - accuracy: 0.8860 - val_loss: 0.4008 - val_accuracy: 0.8333\n",
      "Epoch 11/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3548 - accuracy: 0.8737 - val_loss: 0.3971 - val_accuracy: 0.8333\n",
      "Epoch 12/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3198 - accuracy: 0.8915 - val_loss: 0.3924 - val_accuracy: 0.8333\n",
      "Epoch 13/80\n",
      "36/36 [==============================] - 0s 3ms/step - loss: 0.3414 - accuracy: 0.8814 - val_loss: 0.3862 - val_accuracy: 0.8333\n",
      "Epoch 14/80\n",
      "36/36 [==============================] - 0s 2ms/step - loss: 0.3218 - accuracy: 0.8960 - val_loss: 0.3850 - val_accuracy: 0.8333\n",
      "Epoch 15/80\n",
      "36/36 [==============================] - 0s 2ms/step - loss: 0.3323 - accuracy: 0.8797 - val_loss: 0.3835 - val_accuracy: 0.8333\n",
      "Epoch 16/80\n",
      "36/36 [==============================] - 0s 7ms/step - loss: 0.2991 - accuracy: 0.9009 - val_loss: 0.3826 - val_accuracy: 0.8333\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(16, input_shape=(x.shape[1],), activation='relu')) # Add an input shape! (features,)\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.add(Dense(1, activation = 'tanh'))\n",
    "model.summary() \n",
    "\n",
    "\n",
    "model.compile(optimizer='Adam', \n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "  \n",
    "es = EarlyStopping(monitor='val_accuracy', \n",
    "                                   mode='max', \n",
    "                                   patience=10,\n",
    "                                   restore_best_weights=True)\n",
    "\n",
    "\n",
    "history = model.fit(X_train,\n",
    "                    y_train,\n",
    "                    callbacks=[es],\n",
    "                    epochs=80, \n",
    "                    batch_size=10,\n",
    "                    validation_split=0.2,\n",
    "                    shuffle=True,\n",
    "                    verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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0xk0yBm9X92U4uBcn+LEiROMGjUKgKlTp7J69eryGKdMmcL8+fPLz9gePnw4Dz/8MM888wwnTpwIypncdia1S0QYP348f/7zn3nvvfcYP3681yEZ02hU90s/lCZOnMiPfvQjNmzYwNmzZxk8eDAA2dnZ5Ofns379eqKjo0lLS/M7xXdN9u7dy5NPPsm6deto06YN9913X52OU6ZsqnBwpguv64/RN954g9WrV/Paa68xe/ZstmzZwsyZM7npppt48803GT58OMuWLaNXr151jhW8H8UUVjp27MigQYNYu3ZteVufMSZ8JSQkMGbMGO6///4KndMnT56kffv2REdHs3LlSvb5u/i8j5EjR7JggTORw6effsrmzZsBZ6rw+Ph4WrVqxZEjR1iyZEn5PomJiX7b+UeMGMGrr77K2bNnOXPmDK+88gojRoyo9Wtr1aoVbdq0Ka99/OMf/2DUqFGUlpZy4MABxowZw+OPP87Jkyc5ffo0u3fvpn///vzsZz/jqquu4rPPPqv1c1ZmNYhKxo4dy9atW3n77berHAJnjAkfkydP5rbbbqswomnKlCnccsst9O/fn6ysrBp/ST/00EN861vfonfv3vTu3bu8JjJw4EAyMjLo1asXnTt3rjBV+PTp05kwYQKXX345K1euLC/PzMzkvvvuY8iQIQBMmzaNjIyMapuTqvL3v/+dBx98kLNnz3LFFVfw/PPPU1JSwj333MPJkydRVWbMmEHr1q351a9+xcqVK4mIiKBv377lV8erD5vu2493332XVatWcf/999O5c+eadzCmGbLpvhuf2k73bU1Mfnzta18jISHBTp4zxjRrliD8iImJYezYseTl5dU4YsEYY5oqSxBVGDhwIB06dOCtt94K+oXJjWkqrIbdeNTls7IEUYWyk+dOnDjB2rVrvQ7HmLATGxtLQUGBJYlGQFUpKCio9clzNoqpGt26daN79+6sXr2aQYMGERcX53VIxoSN1NRU8vLyqOtMyqZhxcbGkpqaWqt9LEHU4LrrruNPf/oTq1atCsqwMWOaiujoaNLT070Ow4SQNTHVoH379mRmZpKTk0NBQYHX4RhjTIOxBBGA0aNHExUVxVtvveV1KMYY02AsQQQgISGBa665hs8++6xOZ0MaY0xjZAkiQMOGDSMpKclOnjPGNBuWIAIUHR3N2LFjOXz4MFu2bPE6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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "history_dict = history.history\n",
    "\n",
    "loss_values = history_dict['loss'] \n",
    "val_loss_values = history_dict['val_loss'] \n",
    "\n",
    "\n",
    "epochs = range(1, len(loss_values) + 1) \n",
    "\n",
    "# plot\n",
    "plt.plot(epochs, loss_values, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss_values, 'grey', label='Validation loss')\n",
    "plt.title('Training loss & validation loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0.8333333134651184"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc = history.history['accuracy']\n",
    "val_acc = history.history['val_accuracy']\n",
    "\n",
    "\n",
    "epochs = range(1, len(acc) + 1)\n",
    "\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training accuracy')\n",
    "\n",
    "plt.plot(epochs, val_acc, 'grey', label='Validation accuracy')\n",
    "plt.title('Training accuracy & validation accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "np.max(val_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 91  32]\n",
      " [ 27 126]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.74      0.76       123\n",
      "           1       0.80      0.82      0.81       153\n",
      "\n",
      "    accuracy                           0.79       276\n",
      "   macro avg       0.78      0.78      0.78       276\n",
      "weighted avg       0.79      0.79      0.79       276\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "\n",
    "model.predict(X_test) \n",
    "np.round(model.predict(X_test),0) \n",
    "\n",
    "\n",
    "preds = np.round(model.predict(X_test),0)\n",
    "\n",
    "\n",
    "print(confusion_matrix(y_test, preds)) \n",
    "\n",
    "\n",
    "print(classification_report(y_test, preds))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.7933419 ],\n",
       "       [0.07228942],\n",
       "       [0.80711555],\n",
       "       [0.7917751 ],\n",
       "       [0.36840743],\n",
       "       [0.13394503],\n",
       "       [0.79852736],\n",
       "       [0.6632656 ],\n",
       "       [0.30885103],\n",
       "       [0.06638654],\n",
       "       [0.09599675],\n",
       "       [0.68872625],\n",
       "       [0.39253676],\n",
       "       [0.7922184 ],\n",
       "       [0.731051  ],\n",
       "       [0.73009443],\n",
       "       [0.73670083],\n",
       "       [0.27257726],\n",
       "       [0.03359313],\n",
       "       [0.47371003],\n",
       "       [0.09451615],\n",
       "       [0.53253806],\n",
       "       [0.18362622],\n",
       "       [0.05631449],\n",
       "       [0.24346852],\n",
       "       [0.61311674],\n",
       "       [0.43509445],\n",
       "       [0.5489524 ],\n",
       "       [0.10721395],\n",
       "       [0.7504788 ],\n",
       "       [0.630965  ],\n",
       "       [0.16266206],\n",
       "       [0.05100491],\n",
       "       [0.80488646],\n",
       "       [0.3852114 ],\n",
       "       [0.73420745],\n",
       "       [0.36211443],\n",
       "       [0.17267933],\n",
       "       [0.16855966],\n",
       "       [0.7860792 ],\n",
       "       [0.77854586],\n",
       "       [0.27797878],\n",
       "       [0.5930383 ],\n",
       "       [0.06439482],\n",
       "       [0.78466463],\n",
       "       [0.7031672 ],\n",
       "       [0.6135413 ],\n",
       "       [0.78895605],\n",
       "       [0.63893026],\n",
       "       [0.08753651],\n",
       "       [0.78142536],\n",
       "       [0.04390398],\n",
       "       [0.04016897],\n",
       "       [0.319239  ],\n",
       "       [0.7928663 ],\n",
       "       [0.03360432],\n",
       "       [0.773193  ],\n",
       "       [0.21425197],\n",
       "       [0.78328395],\n",
       "       [0.11989262],\n",
       "       [0.76415336],\n",
       "       [0.80210847],\n",
       "       [0.05925698],\n",
       "       [0.7320601 ],\n",
       "       [0.14395943],\n",
       "       [0.2215191 ],\n",
       "       [0.7709251 ],\n",
       "       [0.15138033],\n",
       "       [0.7885798 ],\n",
       "       [0.80297756],\n",
       "       [0.7296521 ],\n",
       "       [0.63922536],\n",
       "       [0.7696627 ],\n",
       "       [0.6069751 ],\n",
       "       [0.7846754 ],\n",
       "       [0.43369833],\n",
       "       [0.6729604 ],\n",
       "       [0.80256784],\n",
       "       [0.34957856],\n",
       "       [0.77104914],\n",
       "       [0.29237732],\n",
       "       [0.03484955],\n",
       "       [0.659724  ],\n",
       "       [0.72836983],\n",
       "       [0.05839676],\n",
       "       [0.6864982 ],\n",
       "       [0.60661566],\n",
       "       [0.5697212 ],\n",
       "       [0.75273293],\n",
       "       [0.07144651],\n",
       "       [0.5322007 ],\n",
       "       [0.7760838 ],\n",
       "       [0.15685308],\n",
       "       [0.6506112 ],\n",
       "       [0.7791702 ],\n",
       "       [0.07914869],\n",
       "       [0.61410505],\n",
       "       [0.2816576 ],\n",
       "       [0.2708173 ],\n",
       "       [0.74725753],\n",
       "       [0.796274  ],\n",
       "       [0.05226135],\n",
       "       [0.5468463 ],\n",
       "       [0.04048345],\n",
       "       [0.06176284],\n",
       "       [0.14761056],\n",
       "       [0.05992666],\n",
       "       [0.7598008 ],\n",
       "       [0.75517035],\n",
       "       [0.80469626],\n",
       "       [0.79719794],\n",
       "       [0.7664828 ],\n",
       "       [0.7594622 ],\n",
       "       [0.221388  ],\n",
       "       [0.08323555],\n",
       "       [0.7876658 ],\n",
       "       [0.04041172],\n",
       "       [0.15278733],\n",
       "       [0.7378036 ],\n",
       "       [0.08460305],\n",
       "       [0.15358657],\n",
       "       [0.5459345 ],\n",
       "       [0.7566542 ],\n",
       "       [0.47359315],\n",
       "       [0.7510532 ],\n",
       "       [0.7617919 ],\n",
       "       [0.29707608],\n",
       "       [0.6310646 ],\n",
       "       [0.07686504],\n",
       "       [0.70939666],\n",
       "       [0.09772141],\n",
       "       [0.07547307],\n",
       "       [0.11294682],\n",
       "       [0.78238666],\n",
       "       [0.56596595],\n",
       "       [0.6436188 ],\n",
       "       [0.06148741],\n",
       "       [0.1248884 ],\n",
       "       [0.6617468 ],\n",
       "       [0.6383936 ],\n",
       "       [0.79038453],\n",
       "       [0.19812414],\n",
       "       [0.7654352 ],\n",
       "       [0.20906302],\n",
       "       [0.7809894 ],\n",
       "       [0.7806308 ],\n",
       "       [0.46814707],\n",
       "       [0.6527013 ],\n",
       "       [0.06042558],\n",
       "       [0.2487896 ],\n",
       "       [0.5798142 ],\n",
       "       [0.08265226],\n",
       "       [0.7067826 ],\n",
       "       [0.7750744 ],\n",
       "       [0.80770475],\n",
       "       [0.7335138 ],\n",
       "       [0.7583588 ],\n",
       "       [0.81202024],\n",
       "       [0.7384388 ],\n",
       "       [0.1483087 ],\n",
       "       [0.73970485],\n",
       "       [0.7841637 ],\n",
       "       [0.65872246],\n",
       "       [0.68074644],\n",
       "       [0.680177  ],\n",
       "       [0.63481784],\n",
       "       [0.79629016],\n",
       "       [0.05668516],\n",
       "       [0.7693657 ],\n",
       "       [0.13228056],\n",
       "       [0.80802846],\n",
       "       [0.09449596],\n",
       "       [0.15272097],\n",
       "       [0.7724321 ],\n",
       "       [0.74975985],\n",
       "       [0.26788807],\n",
       "       [0.61421984],\n",
       "       [0.03575238],\n",
       "       [0.54854405],\n",
       "       [0.7599307 ],\n",
       "       [0.7023439 ],\n",
       "       [0.06075684],\n",
       "       [0.03661423],\n",
       "       [0.2944381 ],\n",
       "       [0.04103408],\n",
       "       [0.60795027],\n",
       "       [0.56892514],\n",
       "       [0.11487662],\n",
       "       [0.42096958],\n",
       "       [0.21115483],\n",
       "       [0.79636043],\n",
       "       [0.41680214],\n",
       "       [0.7097727 ],\n",
       "       [0.77576953],\n",
       "       [0.24392301],\n",
       "       [0.42779765],\n",
       "       [0.13166308],\n",
       "       [0.28400773],\n",
       "       [0.78659177],\n",
       "       [0.16206893],\n",
       "       [0.67015743],\n",
       "       [0.76358956],\n",
       "       [0.8104602 ],\n",
       "       [0.48883834],\n",
       "       [0.80322564],\n",
       "       [0.7751439 ],\n",
       "       [0.05888202],\n",
       "       [0.78545797],\n",
       "       [0.7548755 ],\n",
       "       [0.06050663],\n",
       "       [0.764441  ],\n",
       "       [0.7541785 ],\n",
       "       [0.75811064],\n",
       "       [0.7628978 ],\n",
       "       [0.38254142],\n",
       "       [0.06952338],\n",
       "       [0.6735268 ],\n",
       "       [0.6223792 ],\n",
       "       [0.8091688 ],\n",
       "       [0.7924638 ],\n",
       "       [0.0559117 ],\n",
       "       [0.78504735],\n",
       "       [0.35243818],\n",
       "       [0.6415589 ],\n",
       "       [0.22348677],\n",
       "       [0.08888399],\n",
       "       [0.79107314],\n",
       "       [0.13372743],\n",
       "       [0.15993266],\n",
       "       [0.1082027 ],\n",
       "       [0.7758459 ],\n",
       "       [0.7625737 ],\n",
       "       [0.59767544],\n",
       "       [0.27630898],\n",
       "       [0.3827301 ],\n",
       "       [0.68630666],\n",
       "       [0.79968697],\n",
       "       [0.7070053 ],\n",
       "       [0.15496641],\n",
       "       [0.61804074],\n",
       "       [0.22240287],\n",
       "       [0.74708104],\n",
       "       [0.7642942 ],\n",
       "       [0.80145234],\n",
       "       [0.0659045 ],\n",
       "       [0.59037334],\n",
       "       [0.77201366],\n",
       "       [0.7184359 ],\n",
       "       [0.12046599],\n",
       "       [0.6903122 ],\n",
       "       [0.6999352 ],\n",
       "       [0.25531003],\n",
       "       [0.4551677 ],\n",
       "       [0.7249407 ],\n",
       "       [0.5541743 ],\n",
       "       [0.6877774 ],\n",
       "       [0.09626337],\n",
       "       [0.09681465],\n",
       "       [0.8080188 ],\n",
       "       [0.04426705],\n",
       "       [0.47033215],\n",
       "       [0.7194805 ],\n",
       "       [0.8070766 ],\n",
       "       [0.28465098],\n",
       "       [0.3396306 ],\n",
       "       [0.7410003 ],\n",
       "       [0.6768491 ],\n",
       "       [0.68648267],\n",
       "       [0.05682626],\n",
       "       [0.7793239 ],\n",
       "       [0.7639552 ],\n",
       "       [0.56973606],\n",
       "       [0.56026065],\n",
       "       [0.43625304],\n",
       "       [0.6628518 ],\n",
       "       [0.72716343]], dtype=float32)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [1.],\n",
       "       [0.],\n",
       "       [1.],\n",
       "       [1.]], dtype=float32)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.round(model.predict(X_test),0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.09490093, 0.03162614, 0.11564771, 0.06754838, 0.10148794,\n",
       "       0.03804239, 0.02628839, 0.11550028, 0.07278669, 0.11386229,\n",
       "       0.22230886])"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "forest = RandomForestClassifier(n_estimators=250,\n",
    "                                random_state=0)\n",
    "\n",
    "forest.fit(X_train, y_train)\n",
    "forest.feature_importances_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0:'Age'\n",
    "1:'Sex'\n",
    "2:'ChestPainType'\n",
    "3:'RestingBP'\n",
    "4:'Cholesterol'\n",
    "5:'FastingBS'\n",
    "6:'RestingECG'\n",
    "7:'MaxHR'\n",
    "8:'ExerciseAngina'\n",
    "9:'Oldpeak'\n",
    "10:'ST_Slope'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "std = np.std([tree.feature_importances_ for tree in forest.estimators_],\n",
    "             axis=0)\n",
    "indices = np.argsort(forest.feature_importances_)[::-1]\n",
    "\n",
    "# Plot the feature importances of the forest\n",
    "plt.figure()\n",
    "plt.title(\"feature importance(random forest)\")\n",
    "plt.bar(range(x.shape[1]), importance_vals[indices],\n",
    "        yerr=std[indices], align=\"center\")\n",
    "plt.xticks(range(x.shape[1]), indices)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
